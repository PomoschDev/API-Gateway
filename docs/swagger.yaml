definitions:
  DatabaseServicev1.AddCardToCompanyRequest:
    properties:
      card:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CreateCardCompanyRequest'
        description: '* Банковская карта'
    type: object
  DatabaseServicev1.AddCardToCompanyResponse:
    properties:
      address:
        description: '* Адрес офиса компании'
        type: string
      card:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CardCompany'
        description: '* Банковская карта компании'
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      id:
        description: '* ID компании в базе данных'
        type: integer
      inn:
        description: '* ИНН юридического лица'
        type: string
      kpp:
        description: '* КПП юридического лица'
        type: string
      okpo:
        description: '* ОКПО предприятия/организации'
        type: string
      phone:
        description: '* Номер телефона компании'
        type: string
      site:
        description: '* Сайт компании'
        type: string
      title:
        description: '* Название компании'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя к которому относится данная компания'
        type: integer
    type: object
  DatabaseServicev1.AddCardToUserRequest:
    properties:
      card:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CreateCardRequest'
        description: '* Банковская карта'
    type: object
  DatabaseServicev1.Card:
    properties:
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      cvv:
        description: '* CVV код карты'
        type: integer
      date:
        description: '* Дата до которой активна карта'
        type: string
      fullName:
        description: '* ФИО с банковской карты'
        type: string
      id:
        description: '* ID банковской карты в базе данных'
        type: integer
      number:
        description: '* Номер карты'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя которому принадлежит данная карта'
        type: integer
    type: object
  DatabaseServicev1.CardCompany:
    properties:
      companyId:
        description: '* ID компании которой принадлежит данная карта'
        type: integer
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      cvv:
        description: '* CVV код карты'
        type: integer
      date:
        description: '* Дата до которой активна карта'
        type: string
      fullName:
        description: '* ФИО с банковской карты'
        type: string
      id:
        description: '* ID банковской карты в базе данных'
        type: integer
      number:
        description: '* Номер карты'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
    type: object
  DatabaseServicev1.CardsCompaniesResponse:
    properties:
      cards:
        description: '* Массив банковских карт компаний'
        items:
          $ref: '#/definitions/DatabaseServicev1.CardCompany'
        type: array
    type: object
  DatabaseServicev1.CardsResponse:
    properties:
      cards:
        description: '* Массив банковских карт пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.Card'
        type: array
    type: object
  DatabaseServicev1.ChangeUserTypeResponse:
    properties:
      accessory:
        description: '* Успешность операции изменения типа (true/false)'
        type: boolean
    type: object
  DatabaseServicev1.CompaniesResponse:
    properties:
      companies:
        description: '* Массив компаний'
        items:
          $ref: '#/definitions/DatabaseServicev1.Company'
        type: array
    type: object
  DatabaseServicev1.Company:
    properties:
      address:
        description: '* Адрес офиса компании'
        type: string
      card:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CardCompany'
        description: '* Банковская карта компании'
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      id:
        description: '* ID компании в базе данных'
        type: integer
      inn:
        description: '* ИНН юридического лица'
        type: string
      kpp:
        description: '* КПП юридического лица'
        type: string
      okpo:
        description: '* ОКПО предприятия/организации'
        type: string
      phone:
        description: '* Номер телефона компании'
        type: string
      site:
        description: '* Сайт компании'
        type: string
      title:
        description: '* Название компании'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя к которому относится данная компания'
        type: integer
    type: object
  DatabaseServicev1.ComparePasswordRequest:
    properties:
      password:
        description: '* Пароль который будем сравнивать с тем, что есть в базе данных'
        type: string
      phone:
        description: '* Номер телефона пользователя, чей пароль будем искать для сравнения'
        type: string
    type: object
  DatabaseServicev1.ComparePasswordResponse:
    properties:
      accessory:
        description: '* Совпадает ли пароль (true/false)'
        type: boolean
    type: object
  DatabaseServicev1.CreateCardCompanyRequest:
    properties:
      companyId:
        description: '* ID компании которой принадлежит данная карта'
        type: integer
      cvv:
        description: '* CVV код банковской карты'
        type: integer
      date:
        description: '* Дата до которой активна карта'
        type: string
      fullName:
        description: '* ФИО с банковской карты'
        type: string
      number:
        description: '* Номер банковской карты'
        type: string
    type: object
  DatabaseServicev1.CreateCardRequest:
    properties:
      cvv:
        description: '* CVV код карты'
        type: integer
      date:
        description: '* Дата до которой активна карта'
        type: string
      fullName:
        description: '* ФИО с банковской карты'
        type: string
      number:
        description: '* Номер карты'
        type: string
      userId:
        description: '* ID пользователя кому принадлежит карта'
        type: integer
    type: object
  DatabaseServicev1.CreateCompanyRequest:
    properties:
      address:
        description: '* Адрес офиса компании'
        type: string
      card:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CardCompany'
        description: '* Банковская карта компании'
      inn:
        description: '* ИНН юридического лица'
        type: string
      kpp:
        description: '* КПП юридического лица'
        type: string
      okpo:
        description: '* ОКПО предприятия/организации'
        type: string
      phone:
        description: '* Номер телефона компании'
        type: string
      site:
        description: '* Сайт компании'
        type: string
      title:
        description: '* Название компании'
        type: string
      userId:
        description: '* ID пользователя к которому относится данная компания'
        type: integer
    type: object
  DatabaseServicev1.CreateDonationsRequest:
    properties:
      amount:
        description: '* Сумма пожертвования'
        type: number
      title:
        description: '* Произвольное название пожертвования, примерно так: "На лекарства"'
        type: string
      userId:
        description: '* ID пользователя, чье это пожертвование'
        type: integer
      wards:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Ward'
        description: '* Подопечный данного пожертвования'
    type: object
  DatabaseServicev1.CreateDonationsResponse:
    properties:
      amount:
        description: '* Сумма пожертвования'
        type: number
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      id:
        description: '* ID записи в базе данных'
        type: integer
      title:
        description: '* Название пожертвования (например "На лекарства")'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя, которому принадлежит пожертвование'
        type: integer
      wards:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Ward'
        description: '* Подопечный этого пожертвования'
    type: object
  DatabaseServicev1.CreateUserRequest:
    properties:
      card:
        items:
          $ref: '#/definitions/DatabaseServicev1.CreateCardRequest'
        type: array
      company:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CreateCompanyRequest'
        description: '* Компания пользователя, если он является юридическим лицом'
      donations:
        description: '* Пожертвования пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.CreateDonationsRequest'
        type: array
      email:
        description: '* Email пользователя (обязательно проверяем на формат email@email.com)'
        type: string
      password:
        description: '* Пароль пользователя (необходимо дополнительно валидировать
          корректность пароля)'
        type: string
      phone:
        description: '* Номер телефона (необходимо дополнительно валидировать формат)'
        type: string
      role:
        description: '* Роль пользователя'
        type: string
      type:
        description: '* Тип пользователя, 0 - физическое лицо, 1 - юридическое лицо'
        type: integer
      username:
        description: '* Имя (никнейм) пользователя'
        type: string
    type: object
  DatabaseServicev1.CreateUserResponse:
    properties:
      AvatarPath:
        description: '* Локальный путь к аватару пользователя'
        type: string
      card:
        description: '* Банковские карты пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.Card'
        type: array
      company:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Company'
        description: '* Компания пользователя, если он является юридическим лицом'
      createdAt:
        description: '* Дата создания сущности записи в базе данных'
        type: string
      donations:
        description: '* Пожертвования пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.Donations'
        type: array
      email:
        description: '* Email пользователя'
        type: string
      id:
        description: '* ID пользователя'
        type: integer
      password:
        description: '* Пароль пользователя (закодирован в MD5Hash)'
        type: string
      phone:
        description: '* Номер телефона пользователя'
        type: string
      role:
        description: '* Роль пользователя'
        type: string
      type:
        description: '* Тип пользователя, 0 - физическое лицо, 1 - юридическое лицо'
        type: integer
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      username:
        description: '* Имя (никнейм) пользователя'
        type: string
    type: object
  DatabaseServicev1.CreateWardRequest:
    properties:
      donationId:
        description: '* ID пожертвования'
        type: integer
      fullName:
        description: '* Полное имя подопечного'
        type: string
      necessary:
        description: '* Необходимая сумма денег на необходимость'
        type: number
      title:
        description: '* Дополнительный текст к подопечному'
        type: string
      want:
        description: '* Необходимость подопечного (то в чем он нуждается, например
          "Лекарства")'
        type: string
    type: object
  DatabaseServicev1.DeleteCompanyByModelRequest:
    properties:
      company:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Company'
        description: '* Полная сущность модели для удаления'
    type: object
  DatabaseServicev1.DeleteDonationByModelRequest:
    properties:
      amount:
        description: '* Сумма пожертвования'
        type: number
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      id:
        description: '* ID пожертвования в базе данных'
        type: integer
      title:
        description: '* Название пожертвования (например "На лекарства")'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя, которому принадлежит пожертвование'
        type: integer
      wards:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Ward'
        description: '* Подопечный этого пожертвования'
    type: object
  DatabaseServicev1.DeleteUserByModelRequest:
    properties:
      user:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        description: '* Сущность пользователя для удаления (полная модель пользователя)'
    type: object
  DatabaseServicev1.Donations:
    properties:
      amount:
        description: '* Сумма пожертвования'
        type: number
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      id:
        description: '* ID пожертвования в базе данных'
        type: integer
      title:
        description: '* Название пожертвования (например "На лекарства")'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя, которому принадлежит пожертвование'
        type: integer
      ward:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Ward'
        description: '* Подопечный этого пожертвования'
    type: object
  DatabaseServicev1.DonationsResponse:
    properties:
      donations:
        description: '* Массив пожертвований'
        items:
          $ref: '#/definitions/DatabaseServicev1.Donations'
        type: array
    type: object
  DatabaseServicev1.FindDonationWardsResponse:
    properties:
      wards:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Ward'
        description: '* Подопечный пожертвования'
    type: object
  DatabaseServicev1.FindUserCardResponse:
    properties:
      cards:
        description: '* Массив банковских карт'
        items:
          $ref: '#/definitions/DatabaseServicev1.Card'
        type: array
    type: object
  DatabaseServicev1.FindUserDonationsResponse:
    properties:
      donations:
        description: '* Массив пожертвований пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.Donations'
        type: array
    type: object
  DatabaseServicev1.HTTPCodes:
    properties:
      code:
        description: '* HTTP код ответа'
        type: integer
    type: object
  DatabaseServicev1.IsRoleRequest:
    properties:
      id:
        description: '* ID пользователя'
        type: integer
      role:
        description: '* Роль пользователя которую мы ожиданием'
        type: string
    type: object
  DatabaseServicev1.IsRoleResponse:
    properties:
      accessory:
        description: '* Принадлежность к роли (true/false)'
        type: boolean
    type: object
  DatabaseServicev1.UpdateCompanyRequest:
    properties:
      company:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Company'
        description: '* Компания которую обновляем'
    type: object
  DatabaseServicev1.UpdateDonationsRequest:
    properties:
      amount:
        description: '* Сумма пожертвования'
        type: number
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      id:
        description: '* ID пожертвования в базе данных'
        type: integer
      title:
        description: '* Название пожертвования (например "На лекарства")'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя, которому принадлежит пожертвование'
        type: integer
      wards:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Ward'
        description: '* Подопечный этого пожертвования'
    type: object
  DatabaseServicev1.UpdateUserCardRequest1:
    properties:
      cvv:
        description: '* CVV код карты'
        type: integer
      date:
        description: '* Дата до которой активна карта'
        type: string
      fullName:
        description: '* ФИО с банковской карты'
        type: string
      number:
        description: '* Номер карты'
        type: string
    type: object
  DatabaseServicev1.UpdateUserCardResponse:
    properties:
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      cvv:
        description: '* CVV код карты'
        type: integer
      date:
        description: '* Дата до которой активна карта'
        type: string
      fullName:
        description: '* ФИО с банковской карты'
        type: string
      id:
        description: '* ID банковской карты в базе данных'
        type: integer
      number:
        description: '* Номер карты'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      userId:
        description: '* ID пользователя которому принадлежит данная карта'
        type: integer
    type: object
  DatabaseServicev1.UpdateUserRequest:
    properties:
      AvatarPath:
        description: '* Локальный путь к аватару пользователя'
        type: string
      card:
        description: '* Массив банковских карт пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.Card'
        type: array
      company:
        allOf:
        - $ref: '#/definitions/DatabaseServicev1.Company'
        description: '* Компания пользователя, если он является юридическим лицом
          (type = 1)'
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      donations:
        description: '* Массив пожертвований пользователя'
        items:
          $ref: '#/definitions/DatabaseServicev1.Donations'
        type: array
      email:
        description: '* Email пользователя'
        type: string
      id:
        description: '* ID пользователя в базе данных'
        type: integer
      password:
        description: '* Пароль пользователя (закодирован в MD5Hash)'
        type: string
      phone:
        description: '* Номер телефона пользователя'
        type: string
      role:
        description: '* Роль пользователя'
        type: string
      type:
        description: '* Тип пользователя (0 - физическое лицо, 1 - юридическое лицо)'
        type: integer
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      username:
        description: '* Имя (никнейм) пользователя'
        type: string
    type: object
  DatabaseServicev1.UserIsExistsRequest:
    properties:
      phone:
        description: '* Номер телефона пользователя, по которому будем искать сущность'
        type: string
    type: object
  DatabaseServicev1.UserIsExistsResponse:
    properties:
      isExists:
        description: '* Существует ли пользователь в базе данных (true/false)'
        type: boolean
    type: object
  DatabaseServicev1.UsersResponse:
    properties:
      users:
        description: '* Массив пользователей'
        items:
          $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        type: array
    type: object
  DatabaseServicev1.Ward:
    properties:
      AvatarPath:
        description: '* Локальный путь к аватару подопечного'
        type: string
      createdAt:
        description: '* Дата создания сущности в базе данных'
        type: string
      donationId:
        description: '* ID пожертвования к которому относится данный подопечный'
        type: integer
      fullName:
        description: '* Полное имя подопечного'
        type: string
      id:
        description: '* ID подопечного в базе данных'
        type: integer
      necessary:
        description: '* Необходимая сумма денег на необходимость'
        type: number
      title:
        description: '* Дополнительный текст к подопечному'
        type: string
      updatedAt:
        description: '* Дата последнего обновления сущности в базе данных'
        type: string
      want:
        description: '* Необходимость подопечного (то в чем он нуждается, например
          "Лекарства")'
        type: string
    type: object
  DatabaseServicev1.WardsResponse:
    properties:
      wards:
        description: '* Массив подопечных'
        items:
          $ref: '#/definitions/DatabaseServicev1.Ward'
        type: array
    type: object
  server.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
info:
  contact: {}
  description: Сервер маршрутизации
  title: API Gateway
  version: "1.0"
paths:
  /api/v1/card/company:
    get:
      consumes:
      - application/json
      description: Банковская карта компании в базе данных
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CardsCompaniesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Банковская карта компании
      tags:
      - CardCompany
    post:
      consumes:
      - application/json
      description: Создание банковской карты компании
      parameters:
      - description: Сущность банковской карты компании
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.CreateCardCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Card'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Создание банковской карты компании
      tags:
      - CardCompany
    put:
      consumes:
      - application/json
      description: Обновление банковской карты компании
      parameters:
      - description: Модель для обновления
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.CardCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CardCompany'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Обновление банковской карты компании
      tags:
      - Cards
  /api/v1/card/company/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление банковской карты компании по ID
      parameters:
      - description: ID банковской карты компании
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление банковской карты компании
      tags:
      - CardCompany
    get:
      consumes:
      - application/json
      description: Поиск банковской карты компании по ID
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CardCompany'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск банковской карты компании
      tags:
      - CardCompany
  /api/v1/card/company/deleteModel:
    post:
      consumes:
      - application/json
      description: Удаляет банковскую карту компании опираясь на всю сущность модели
      parameters:
      - description: Сущность банковской карты компании
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.CardCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление банковской карты компании по модели
      tags:
      - CardCompany
  /api/v1/cards:
    get:
      consumes:
      - application/json
      description: Массив банковских карт в базе данных
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CardsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Список всех банковских карт
      tags:
      - Cards
    post:
      consumes:
      - application/json
      description: Создание банковской карты пользователя
      parameters:
      - description: Сущность банковской карты
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.CreateCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Card'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Создание банковской карты пользователя
      tags:
      - Cards
  /api/v1/cards/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление банковской карты пользователя по ID
      parameters:
      - description: ID банковской карты
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление банковской карты пользователя
      tags:
      - Cards
    get:
      consumes:
      - application/json
      description: Поиск банковской карты по ID
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Card'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск банковской карты
      tags:
      - Cards
    put:
      consumes:
      - application/json
      description: Обновление банковской карты
      parameters:
      - description: ID банковской карты
        in: path
        name: id
        required: true
        type: integer
      - description: Модель для обновления
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/DatabaseServicev1.UpdateUserCardRequest1'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.UpdateUserCardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Обновление банковской карты
      tags:
      - Cards
  /api/v1/cards/deleteModel:
    post:
      consumes:
      - application/json
      description: Удаляет банковскую карту опираясь на всю сущность модели
      parameters:
      - description: Модель банковской карты
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.Card'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление банковской карты по модели
      tags:
      - Cards
  /api/v1/companies:
    get:
      consumes:
      - application/json
      description: Массив компаний в базе данных
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CompaniesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Список всех компаний
      tags:
      - Company
    post:
      consumes:
      - application/json
      description: Создание новой сущности компании
      parameters:
      - description: Сущность компании
        in: body
        name: company
        schema:
          $ref: '#/definitions/DatabaseServicev1.CreateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Создание компании
      tags:
      - Company
    put:
      consumes:
      - application/json
      description: Обновление сущности компании
      parameters:
      - description: Модель для обновления
        in: body
        name: company
        schema:
          $ref: '#/definitions/DatabaseServicev1.UpdateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Обновление компании
      tags:
      - Company
  /api/v1/companies/:
    get:
      consumes:
      - application/json
      description: Поиск компании по ее phone
      parameters:
      - description: Phone
        in: query
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск компании по номеру телефона
      tags:
      - Company
  /api/v1/companies/{id}:
    get:
      consumes:
      - application/json
      description: Поиск компании по ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск компании
      tags:
      - Company
  /api/v1/companies/{id}/card:
    get:
      consumes:
      - application/json
      description: Извлечение банковской карты компании по ее ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CardCompany'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Извлечение банковской карты компании
      tags:
      - Company
  /api/v1/companies/addCard:
    post:
      consumes:
      - application/json
      description: Добавляет банковскую карту компании, поле companyId это ID компании
        в базе данных, которой будем добавлять карту
      parameters:
      - description: Сущность банковской карты
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.AddCardToCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.AddCardToCompanyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Добавляет банковскую карту компании
      tags:
      - Company
  /api/v1/companies/deleteModel:
    post:
      consumes:
      - application/json
      description: Удаляет компании опираясь на всю сущность модели
      parameters:
      - description: Модель компании
        in: body
        name: company
        schema:
          $ref: '#/definitions/DatabaseServicev1.DeleteCompanyByModelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление компании по модели
      tags:
      - Company
  /api/v1/company/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление компании по ID
      parameters:
      - description: ID компании
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление компании
      tags:
      - Company
  /api/v1/donations:
    get:
      consumes:
      - application/json
      description: Список всех пожертвований в базе данных
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.DonationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Список всех пожертвований
      tags:
      - Donations
    post:
      consumes:
      - application/json
      description: Создание пожертвования
      parameters:
      - description: Сущность пожертвования
        in: body
        name: donation
        schema:
          $ref: '#/definitions/DatabaseServicev1.CreateDonationsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Card'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Создание пожертвования
      tags:
      - Donations
    put:
      consumes:
      - application/json
      description: Обновление пожертвования
      parameters:
      - description: Модель для обновления
        in: body
        name: donation
        schema:
          $ref: '#/definitions/DatabaseServicev1.UpdateDonationsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateDonationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Обновление пожертвования
      tags:
      - Donations
  /api/v1/donations/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление пожертвования по ID
      parameters:
      - description: ID пожертвования
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление пожертвования
      tags:
      - Donations
    get:
      consumes:
      - application/json
      description: Поиск пожертвовани по ID
      parameters:
      - description: Donation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateDonationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск пожертвования
      tags:
      - Donations
  /api/v1/donations/{id}/wards:
    get:
      consumes:
      - application/json
      description: Извлечение подопечных пожертвования по ID пожертвования
      parameters:
      - description: Donation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.FindDonationWardsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Извлечение подопечных пожертвования
      tags:
      - Donations
  /api/v1/donations/deleteModel:
    post:
      consumes:
      - application/json
      description: Удаляет пожертвование опираясь на всю сущность модели
      parameters:
      - description: Сущность пожертвования
        in: body
        name: donation
        schema:
          $ref: '#/definitions/DatabaseServicev1.DeleteDonationByModelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление пожертвования по модели
      tags:
      - Donations
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Массив пользователей в базе данных
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Список всех пользователей
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Создание новой сущности пользователя
      parameters:
      - description: Сущность пользователя
        in: body
        name: user
        schema:
          $ref: '#/definitions/DatabaseServicev1.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Создание пользователя
      tags:
      - Users
  /api/v1/users/:
    get:
      consumes:
      - application/json
      description: Поиск пользователя по его phone
      parameters:
      - description: Phone
        in: query
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск пользователя по номеру телефона
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление пользователя
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Поиск пользователя по ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск пользователя
      tags:
      - Users
    patch:
      consumes:
      - multipart/form-data
      description: Обновление типа пользователя (0 - юридическое лицо, 1 - физическое
        лицо)
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Type поле пользователя, 0 - юридическое лицо, 1 - физическое
          лицо
        in: formData
        name: type
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.ChangeUserTypeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Меняет тип пользователя
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновление сущности пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Модель для обновления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/DatabaseServicev1.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Обновление пользователя
      tags:
      - Users
  /api/v1/users/{id}/card:
    get:
      consumes:
      - application/json
      description: Извлечение карт пользователя по его ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.FindUserCardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Извлечение карт пользователя
      tags:
      - Users
  /api/v1/users/{id}/company:
    get:
      consumes:
      - application/json
      description: Извлечение компании пользователя по его ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Извлечение компании пользователя
      tags:
      - Users
  /api/v1/users/{id}/donation:
    get:
      consumes:
      - application/json
      description: Извлечение пожертвований пользователя по его ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.FindUserDonationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Извлечение пожертвований пользователя
      tags:
      - Users
  /api/v1/users/addCard:
    post:
      consumes:
      - application/json
      description: Добавляет банковскую карту пользователю, поле userId это ID пользователя
        в базе данных, которому будем добавлять карту
      parameters:
      - description: Сущность банковской карты
        in: body
        name: card
        schema:
          $ref: '#/definitions/DatabaseServicev1.AddCardToUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Добавляет банковскую карту пользователю
      tags:
      - Users
  /api/v1/users/comparePassword:
    post:
      consumes:
      - application/json
      description: Сравнивает пароль что ввел пользователь, с тем что есть в базе
        данных у его аккаунта
      parameters:
      - description: Данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/DatabaseServicev1.ComparePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.ComparePasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Сравнение вводимого пароля от пользователя
      tags:
      - Users
  /api/v1/users/deleteModel:
    post:
      consumes:
      - application/json
      description: Удаляет пользователя опираясь на всю сущность модели
      parameters:
      - description: Модель пользователя
        in: body
        name: user
        schema:
          $ref: '#/definitions/DatabaseServicev1.DeleteUserByModelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление пользователя по модели
      tags:
      - Users
  /api/v1/users/isExists:
    post:
      consumes:
      - application/json
      description: Проверка существует ли пользователь, проверка по номеру телефона
      parameters:
      - description: Номер телефона
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/DatabaseServicev1.UserIsExistsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.UserIsExistsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Проверка существует ли пользователь
      tags:
      - Users
  /api/v1/users/isRole:
    post:
      consumes:
      - application/json
      description: Проверяет пользователя на принадлежность к определенной роли
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/DatabaseServicev1.IsRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.IsRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Проверяет принадлежность к роли
      tags:
      - Users
  /api/v1/wards:
    get:
      consumes:
      - application/json
      description: Список всех подопечных в базе данных
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.WardsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Список всех подопечных
      tags:
      - Wards
    post:
      consumes:
      - application/json
      description: Создание подопечного
      parameters:
      - description: Сущность подопечного
        in: body
        name: ward
        schema:
          $ref: '#/definitions/DatabaseServicev1.CreateWardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Ward'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Создание подопечного
      tags:
      - Wards
    put:
      consumes:
      - application/json
      description: Обновление подопечного
      parameters:
      - description: Модель для обновления
        in: body
        name: ward
        schema:
          $ref: '#/definitions/DatabaseServicev1.Ward'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Ward'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Обновление подопечного
      tags:
      - Wards
  /api/v1/wards/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление подопечного по ID
      parameters:
      - description: ID подопечного
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление подопечного
      tags:
      - Wards
    get:
      consumes:
      - application/json
      description: Поиск подопечного по ID
      parameters:
      - description: ID подопечного
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.Ward'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Поиск подопечного
      tags:
      - Wards
  /api/v1/wards/deleteModel:
    post:
      consumes:
      - application/json
      description: Удаляет подопечного опираясь на всю сущность модели
      parameters:
      - description: Сущность подопечного
        in: body
        name: ward
        schema:
          $ref: '#/definitions/DatabaseServicev1.Ward'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DatabaseServicev1.HTTPCodes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Удаление подопечного по модели
      tags:
      - Wards
swagger: "2.0"
